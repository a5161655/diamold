plugins {
    id 'fabric-loom' version "${loom_version}"
    id "org.jetbrains.kotlin.jvm" version "${kotlin_version}"
    id 'com.matthewprenger.cursegradle' version "${curse_gradle}"
    id "com.modrinth.minotaur" version "${minotaur}"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = mod_id
version = "${project.mod_version}+${project.minecraft_version}"
group = maven_group


repositories {
    maven { url = "https://maven.fabricmc.net/" }
    maven { url = "https://server.bbkr.space/artifactory/libs-release/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"


    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${fabric_kotlin_version}"

    modImplementation 'io.github.cottonmc:LibCD:3.0.3+1.16.3'
    include 'io.github.cottonmc:LibCD:3.0.3+1.16.3'
    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

curseforge {
    def props = new Properties()
    file("curseforge.properties").withInputStream { props.load(it) }
    apiKey = props."api_key"
    project {
        id = curse_id
        changelogType = "markdown"
        changelog = file('changelog.md')
        releaseType = release_type
        addGameVersion minecraft_version
        addGameVersion "Fabric"

        relations {
            requiredDependency 'fabric-api'
            requiredDependency 'fabric-language-kotlin'
        }
        mainArtifact(remapJar)
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        forgeGradleIntegration = false
    }
}

import com.modrinth.minotaur.TaskModrinthUpload

task publishModrinth(type: TaskModrinthUpload) {
    def props = new Properties()
    file("curseforge.properties").withInputStream { props.load(it) }
    token = props."modrinth" // Use an environment property if releasing your source code on GitHub!
    projectId = 'w1QfAiDE' // The ID of your modrinth project, slugs will not work.
    versionNumber = mod_version // The version of the mod to upload.
    uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
    changelog = new File('changelog.md').text
    addGameVersion(minecraft_version) // Any minecraft version.
    addLoader('fabric') // Can be fabric or forge. Modrinth will support liteloader and rift at a later date.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
/*task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}*/

jar {
    from("LICENSE") {
        rename { "${it}_${mod_id}" }
    }
}

compileKotlin.kotlinOptions.jvmTarget = "16"